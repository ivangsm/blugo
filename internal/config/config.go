package config

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/BurntSushi/toml"
)

// Config holds the application configuration
type Config struct {
	// General settings
	Language   string `toml:"language"`    // Default language (en, es)
	ShowEmojis bool   `toml:"show_emojis"` // Whether to show emojis in UI

	// Performance & Timing (in seconds)
	RefreshInterval  int `toml:"refresh_interval"`  // Device list refresh interval (1-10 seconds)
	PairingDelay     int `toml:"pairing_delay"`     // Wait time after pairing in milliseconds (0-5000)
	DisconnectDelay  int `toml:"disconnect_delay"`  // Wait time before forgetting device in milliseconds (0-2000)

	// Display & UI
	MaxTerminalWidth  int  `toml:"max_terminal_width"`  // Maximum UI width in characters (80-200)
	ShowRSSI          bool `toml:"show_rssi"`           // Show signal strength for available devices
	ShowBattery       bool `toml:"show_battery"`        // Show battery percentage
	ShowDeviceAddress bool `toml:"show_device_address"` // Show MAC addresses
	CompactMode       bool `toml:"compact_mode"`        // Reduce padding/spacing

	// Bluetooth Behavior
	AutoTrustOnPair   bool `toml:"auto_trust_on_pair"`   // Automatically trust devices after pairing
	AutoStartScanning bool `toml:"auto_start_scanning"`  // Start scanning on app launch
	RememberLanguage  bool `toml:"remember_language"`    // Save language changes to config

	// Battery Thresholds (percentage 0-100)
	BatteryHighThreshold int `toml:"battery_high_threshold"` // Level above which battery is "high"
	BatteryLowThreshold  int `toml:"battery_low_threshold"`  // Level below which battery is "low"

	// Filtering & Display
	HideUnnamedDevices bool `toml:"hide_unnamed_devices"` // Hide devices without a name
	MinRSSIThreshold   int  `toml:"min_rssi_threshold"`   // Only show devices above this signal strength (dBm, e.g., -80)
	DeviceTimeout      int  `toml:"device_timeout"`       // Remove devices not seen for X seconds (0 = never)
}

var (
	// Global config instance
	Global *Config
)

// Default returns a new Config with default values
func Default() *Config {
	return &Config{
		// General settings
		Language:   "en",
		ShowEmojis: true,

		// Performance & Timing
		RefreshInterval: 2,     // 2 seconds (balanced)
		PairingDelay:    1000,  // 1 second
		DisconnectDelay: 500,   // 500ms

		// Display & UI
		MaxTerminalWidth:  140,  // Good for most terminals
		ShowRSSI:          true,
		ShowBattery:       true,
		ShowDeviceAddress: true,
		CompactMode:       false,

		// Bluetooth Behavior
		AutoTrustOnPair:   true,  // Convenience
		AutoStartScanning: true,  // Most users want this
		RememberLanguage:  true,  // Persist language preference

		// Battery Thresholds
		BatteryHighThreshold: 60,  // 60% and above is "high"
		BatteryLowThreshold:  30,  // Below 30% is "low"

		// Filtering & Display
		HideUnnamedDevices: false,
		MinRSSIThreshold:   -100,  // Show all devices (very weak signal)
		DeviceTimeout:      0,     // Never timeout (keep all discovered devices)
	}
}

// ConfigPath returns the path to the config file
func ConfigPath() (string, error) {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return "", fmt.Errorf("failed to get home directory: %w", err)
	}

	configDir := filepath.Join(homeDir, ".config", "blugo")
	return filepath.Join(configDir, "config.toml"), nil
}

// Load reads the config file from disk
// If the file doesn't exist, it creates a default config
func Load() (*Config, error) {
	configPath, err := ConfigPath()
	if err != nil {
		return nil, err
	}

	// Check if config file exists
	if _, err := os.Stat(configPath); os.IsNotExist(err) {
		// Create default config
		cfg := Default()
		if err := cfg.Save(); err != nil {
			return nil, fmt.Errorf("failed to create default config: %w", err)
		}
		return cfg, nil
	}

	// Load existing config
	cfg := &Config{}
	if _, err := toml.DecodeFile(configPath, cfg); err != nil {
		return nil, fmt.Errorf("failed to decode config file: %w", err)
	}

	return cfg, nil
}

// Save writes the config to disk
func (c *Config) Save() error {
	configPath, err := ConfigPath()
	if err != nil {
		return err
	}

	// Ensure config directory exists
	configDir := filepath.Dir(configPath)
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("failed to create config directory: %w", err)
	}

	// Create/overwrite config file
	f, err := os.Create(configPath)
	if err != nil {
		return fmt.Errorf("failed to create config file: %w", err)
	}
	defer f.Close()

	// Write header comments with documentation
	header := `# Blugo Configuration File
# This file is automatically generated on first run
# Edit values and restart Blugo for changes to take effect

# GENERAL SETTINGS
# language: Default language (en, es)
# show_emojis: Whether to show emojis in UI (true/false)

# PERFORMANCE & TIMING
# refresh_interval: Device list refresh interval in seconds (1-10)
#   - Lower = more responsive, higher CPU usage
#   - Higher = less responsive, better battery life
# pairing_delay: Wait time after pairing in milliseconds (0-5000)
# disconnect_delay: Wait time before forgetting device in milliseconds (0-2000)

# DISPLAY & UI
# max_terminal_width: Maximum UI width in characters (80-200)
# show_rssi: Show signal strength for available devices (true/false)
# show_battery: Show battery percentage (true/false)
# show_device_address: Show MAC addresses (true/false)
# compact_mode: Reduce padding/spacing for smaller terminals (true/false)

# BLUETOOTH BEHAVIOR
# auto_trust_on_pair: Automatically trust devices after pairing (true/false)
# auto_start_scanning: Start scanning on app launch (true/false)
# remember_language: Save language changes to config (true/false)

# BATTERY THRESHOLDS (percentage 0-100)
# battery_high_threshold: Level above which battery is "high"
# battery_low_threshold: Level below which battery is "low"

# FILTERING & DISPLAY
# hide_unnamed_devices: Hide devices without a name (true/false)
# min_rssi_threshold: Only show devices above this signal strength in dBm (e.g., -80)
#   - Typical values: -30 (very close) to -100 (very far)
# device_timeout: Remove devices not seen for X seconds (0 = never timeout)

`
	if _, err := f.WriteString(header); err != nil {
		return err
	}

	// Encode config as TOML
	encoder := toml.NewEncoder(f)
	if err := encoder.Encode(c); err != nil {
		return fmt.Errorf("failed to encode config: %w", err)
	}

	return nil
}

// Init initializes the global config
// This should be called at application startup
func Init() error {
	cfg, err := Load()
	if err != nil {
		return err
	}
	Global = cfg
	return nil
}
